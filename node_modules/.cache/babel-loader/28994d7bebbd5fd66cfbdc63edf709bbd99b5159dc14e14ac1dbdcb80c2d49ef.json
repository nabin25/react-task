{"ast":null,"code":"var _jsxFileName = \"E:\\\\react-task\\\\react-app\\\\src\\\\components\\\\Posts.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useContext } from 'react';\nimport PostForm from './PostForm';\nimport PostList from './PostList';\nimport { userContext } from '../App';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Posts() {\n  _s();\n  const [posts, setPosts] = useState([]);\n  const userId = useContext();\n  useEffect(() => {\n    const fetchData = () => {\n      fetch(\"https://jsonplaceholder.typicode.com/posts\").then(response => response.json()).then(response => {\n        const filteredPosts = response.filter(post => post.userId === 1);\n        setPosts(filteredPosts);\n      });\n    };\n    fetchData();\n  }, []);\n  var newPosts = [...posts];\n  const addPost = (title, body) => {\n    try {\n      if (!title || !body) {\n        var error = {};\n        error.message = 'Fields cannot be empty';\n        throw error;\n      }\n      const userId = 1;\n      let post = {\n        userId,\n        title,\n        body\n      };\n      fetch(\"https://jsonplaceholder.typicode.com/posts\", {\n        method: \"POST\",\n        body: JSON.stringify(post),\n        headers: {\n          \"Content-type\": \"application/json\"\n        }\n      }).then(response => response.json()).then(response => {\n        console.log(response);\n        if (posts.length !== 0) {\n          var id = posts[posts.length - 1]['id'] + 1;\n        } else {\n          id = 1;\n        }\n        const appendedResponse = {\n          ...response,\n          id: id\n        };\n        newPosts = [...posts, appendedResponse];\n        setPosts(newPosts);\n        toast.success('Post added successfully', {\n          position: \"top-center\",\n          autoClose: 3000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true,\n          progress: undefined,\n          theme: \"light\"\n        });\n        console.log(posts);\n      });\n    } catch (err) {\n      toast.error(err.message, {\n        position: \"top-center\",\n        autoClose: 3000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n        theme: \"light\"\n      });\n    }\n  };\n  const deletePost = async index => {\n    try {\n      const response = await fetch(`https://jsonplaceholder.typicode.com/posts/${index}`, {\n        method: \"DELETE\"\n      });\n      console.log(response);\n      let idx = newPosts.findIndex(post => post.id === index);\n      newPosts.splice(idx, 1);\n      setPosts(newPosts);\n      toast.success('Post deleted successfully', {\n        position: \"top-center\",\n        autoClose: 3000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n        theme: \"light\"\n      });\n    } catch (err) {\n      toast.error(err.message, {\n        position: \"top-center\",\n        autoClose: 3000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n        theme: \"light\"\n      });\n    }\n  };\n  const editPost = async (index, title, body) => {\n    let idx = newPosts.findIndex(post => post.id === index);\n    if (newPosts[idx].title !== title || newPosts[idx].body !== body) {\n      try {\n        newPosts[idx].title = title;\n        newPosts[idx].body = body;\n        await fetch(\"https://jsonplaceholder.typicode.com/posts/\" + index, {\n          method: \"PUT\",\n          body: JSON.stringify(newPosts.idx),\n          headers: {\n            \"Content-type\": \"application/json\"\n          }\n        }).then(() => {\n          setPosts(newPosts);\n          toast.success('Post edited successfully', {\n            position: \"top-center\",\n            autoClose: 3000,\n            hideProgressBar: false,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            progress: undefined,\n            theme: \"light\"\n          });\n        });\n      } catch (err) {\n        toast.error(err.message, {\n          position: \"top-center\",\n          autoClose: 3000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true,\n          progress: undefined,\n          theme: \"light\"\n        });\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"posts-container\",\n    children: [/*#__PURE__*/_jsxDEV(PostList, {\n      posts: posts,\n      deletePost: deletePost,\n      editPost: editPost\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PostForm, {\n      addPost: addPost\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 158,\n    columnNumber: 5\n  }, this);\n}\n_s(Posts, \"3sBKk9vMsmyf0TOjGDci7JOlXPQ=\");\n_c = Posts;\nexport default Posts;\nvar _c;\n$RefreshReg$(_c, \"Posts\");","map":{"version":3,"names":["React","useEffect","useState","useContext","PostForm","PostList","userContext","toast","jsxDEV","_jsxDEV","Posts","_s","posts","setPosts","userId","fetchData","fetch","then","response","json","filteredPosts","filter","post","newPosts","addPost","title","body","error","message","method","JSON","stringify","headers","console","log","length","id","appendedResponse","success","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","theme","err","deletePost","index","idx","findIndex","splice","editPost","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/react-task/react-app/src/components/Posts.js"],"sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\r\nimport PostForm from './PostForm';\r\nimport PostList from './PostList';\r\nimport { userContext } from '../App';\r\nimport { toast } from 'react-toastify'\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nfunction Posts() {\r\n  const [posts, setPosts] = useState([]);\r\n  const userId = useContext()\r\n  useEffect(() => {\r\n    const fetchData = () => {\r\n      fetch(\"https://jsonplaceholder.typicode.com/posts\")\r\n      .then(response => response.json())\r\n      .then((response) => {\r\n        const filteredPosts = response.filter((post) => post.userId === 1)\r\n        setPosts(filteredPosts)\r\n      })\r\n    }\r\n    fetchData();\r\n  }, []);\r\n  var newPosts = [...posts]\r\n\r\n  const addPost = (title, body) => {\r\n    try{\r\n      if(!title || !body){\r\n        var error = {}\r\n            error.message='Fields cannot be empty'\r\n            throw(error);\r\n      }\r\n    const userId=1;\r\n    let post = {\r\n      userId,\r\n      title,\r\n      body,\r\n    }\r\n    fetch(\"https://jsonplaceholder.typicode.com/posts\",{\r\n      method:\"POST\",\r\n      body: JSON.stringify(post),\r\n      headers: {\r\n        \"Content-type\": \"application/json\"\r\n      }\r\n    })\r\n    .then(response => response.json())\r\n    .then((response) => {\r\n      console.log(response)\r\n      if (posts.length!==0){\r\n        var id = posts[posts.length-1]['id']+1;\r\n      }\r\n      else{\r\n        id = 1;\r\n      }\r\n      const appendedResponse = {...response, id:id}\r\n      newPosts = [...posts, appendedResponse]\r\n      setPosts(newPosts)\r\n      toast.success('Post added successfully', {\r\n        position: \"top-center\",\r\n        autoClose: 3000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n        theme: \"light\",\r\n        });\r\n      console.log(posts)\r\n    })\r\n  } catch(err){\r\n    toast.error(err.message, {\r\n      position: \"top-center\",\r\n      autoClose: 3000,\r\n      hideProgressBar: false,\r\n      closeOnClick: true,\r\n      pauseOnHover: true,\r\n      draggable: true,\r\n      progress: undefined,\r\n      theme: \"light\",\r\n      });\r\n  }\r\n  }\r\n\r\n  const deletePost = async index => {\r\n    try {\r\n      const response = await fetch(`https://jsonplaceholder.typicode.com/posts/${index}`,{\r\n        method:\"DELETE\"\r\n      });\r\n      console.log(response)\r\n      let idx = newPosts.findIndex(post=>post.id===index);\r\n      newPosts.splice(idx,1);\r\n      setPosts(newPosts)\r\n      toast.success('Post deleted successfully', {\r\n        position: \"top-center\",\r\n        autoClose: 3000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n        theme: \"light\",\r\n        });\r\n    } catch(err){\r\n      toast.error(err.message, {\r\n        position: \"top-center\",\r\n        autoClose: 3000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n        theme: \"light\",\r\n        });\r\n    }\r\n  }\r\n\r\n  const editPost = async (index, title, body) => {\r\n    let idx = newPosts.findIndex(post=>post.id===index);\r\n    if (newPosts[idx].title !== title || newPosts[idx].body !== body){\r\n      try{\r\n        newPosts[idx].title = title;\r\n        newPosts[idx].body = body;\r\n        await fetch(\"https://jsonplaceholder.typicode.com/posts/\"+index,{\r\n          method:\"PUT\",\r\n          body:JSON.stringify(newPosts.idx),\r\n          headers: {\r\n            \"Content-type\": \"application/json\"\r\n          }\r\n        })\r\n        .then(() => {\r\n          setPosts(newPosts)\r\n          toast.success('Post edited successfully', {\r\n          position: \"top-center\",\r\n          autoClose: 3000,\r\n          hideProgressBar: false,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: true,\r\n          progress: undefined,\r\n          theme: \"light\",\r\n          });\r\n        })\r\n      \r\n      } catch(err){\r\n        toast.error(err.message, {\r\n          position: \"top-center\",\r\n          autoClose: 3000,\r\n          hideProgressBar: false,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: true,\r\n          progress: undefined,\r\n          theme: \"light\",\r\n          });\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className='posts-container'>\r\n      <PostList posts={posts} deletePost={deletePost} editPost={editPost} />\r\n      <PostForm addPost={addPost}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Posts;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}